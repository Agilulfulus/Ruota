# This is the solution to a puzzle I found on the internet
# Transcription of puzzle:
#
# 	Given integers n and m, both greater than 0, return a
#	rectangular array of size n by m filled with integers
#	1 through n * m, arranged in an inwards spiral pattern
#	starting at the top left. For example, given 3 and 5,
#	you should return
#
#		1	2	3	4	5
#		12	13	14	15	6
#		11	10	9	8	7

spiral(n, m) => a from {
	a = alloc [n, m];
	v := [1 :> n * m];
	(x, y, dir, i) := (0, 0, 0, -1);
	i + 1 < len v do {
		a[x][y] == null then a[x][y] = v[i+=1];
		(n_x, n_y) := (x, y);
		dir switch {
			0 >> { n_y += 1 };
			1 >> { n_x -= 1 };
			2 >> { n_y -= 1 };
			3 >> { n_x += 1 };
		};
		n_x >= n || n_y >= m || n_x < 0 || n_y < 0 then {
			dir += 1;
		} else a[n_x][n_y] != null then {
			dir += 1;
		} else {
			(x, y) = (n_x, n_y);
		};
		dir %= 4;
	};
};

# Not part of the puzzle
printSpiral(n, m) => {
	m == null then m = n;
	s := spiral(n, m);
	i in s ->> {
		j in i ->> print(j .. "\t");
		newl();
	};
};

len args switch {
0 >> printSpiral(3,5); # original problem
1 >> printSpiral(num args[0]);
2 >> printSpiral(num args[0], num args[1]);
} >> printl("Invalid arguments");