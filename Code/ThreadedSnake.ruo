# This example is EXTREMELY INEFFICIENT
# This merely exists to provide an example of how threads may be used.

load "Curses";

size_x := 15;
size_y := 15;
pos_x := Math.floor(size_x / 4);
pos_y := Math.floor(size_y / 4);
dir := 0;
new_dir := 0;
score := 0;
map := alloc size_x;
curses := new Curses((size_x + 2) * 2, size_y + 2);

i in map ->> {
	i = alloc size_y;
	j in i ->> {
		j = 0;
	};
};

map[Math.floor(size_x / 4 * 3)][Math.floor(size_y / 4 * 3)] = -1;

drawBorder() => {
	i in [0 : size_x + 2] ->> {
		j in [0 : size_y + 2] ->> {
			i == 0 || i == size_x + 1 then curses.setString(i * 2, j, "[]");
			j == 0 || j == size_y + 1 then curses.setString(i * 2, j, "[]");
		};
	};
};

drawMap() => {
	i in [0 : len map] ->> {
		j in [0 : len map[i]] ->> {
			map[i][j] == 0 then curses.setString(i * 2 + 2, j + 1, "  ");
			map[i][j] == -1 then curses.setString(i * 2 + 2, j + 1, "{}");
		};
	};

	char := (dir switch {
	0 >> "<_";
	1 >> "\\/";
	2 >> "_>";
	3 >> "/\\";
	});
	curses.setString(pos_x * 2 + 2, pos_y + 1, char);
};

timer := 0;
timer_fps := 0;
frames := 0;
control() => q from {
	dir = new_dir;
	i in [0 : len map] ->> {
		j in [0 : len map[i]] ->> {
			map[i][j] > 0 then {
				map[i][j] = map[i][j] - 1;
			};
		};
	};

	q = false;

	map[pos_x][pos_y] == -1 then {
		score = score + 1;
		rx := Random.int(size_x - 1);
		ry := Random.int(size_y - 1);
		map[rx][ry] != 0 do {
			rx = Random.int(size_x - 1);
			ry = Random.int(size_y - 1);
		};
		map[rx][ry] = -1;
	} else map[pos_x][pos_y] > 0 then {
		q = true;
		return;
	};

	map[pos_x][pos_y] = score + 1;
	dir switch {
	0 >> pos_x = pos_x - 1;
	1 >> pos_y = pos_y + 1;
	2 >> pos_x = pos_x + 1;
	3 >> pos_y = pos_y - 1;
	};

	pos_x >= len map then q = true;
	pos_x < 0 then q = true;
	pos_y >= len map[0] then q = true;
	pos_y < 0 then q = true;
};

running := true;
keypress() => {
	running do {
		Input.keyDown('A') && dir != 2 then new_dir = 0;
		Input.keyDown('S') && dir != 3 then new_dir = 1;
		Input.keyDown('D') && dir != 0 then new_dir = 2;
		Input.keyDown('W') && dir != 1 then new_dir = 3;
	};
};
frames := 0;
FPS_thread() => {
	timer_fps := 0;
	running do {
		time_start := os.milli();
		timer_fps > 1000 then {
			curses.setString(2, 0, " " .. frames .. " FPS ");
			frames = 0;
			timer_fps = 0;
		};
		timer_fps = timer_fps + (os.milli() - time_start);
	};
};

detach FPS_thread();
detach keypress();
curses.render();

drawBorder();
timer := 0;
!Input.keyDown('Q') do {
	frames = frames + 1;
	time_start := os.milli();
	timer > 100 then {
		control() then break;
		drawMap();
		timer = 0;
	};
	curses.setString(2, size_y + 1, " WASD - Score: " .. score .. " ");
	timer = timer + (os.milli() - time_start);
};
curses.setString(pos_x * 2 + 2, pos_y + 1, "><");
drawMap();
curses.close();
running = false;