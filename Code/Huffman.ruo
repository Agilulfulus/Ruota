load "System";
load "Map";
load "Arrays";

dynamic Huffman :: {
	head := null;
	dict := null;
	undict := null;
	encoded := [];

	dynamic Node :: {
		a := null;
		b := null;
		weight := null;
		value := null;

		getDict(c) => dict from {
			dict = new Map;
			a != null && b != null then {
				adict := a.getDict(c ++ [0]);
				bdict := b.getDict(c ++ [1]);
				dict.contents = dict.contents ++ adict.contents ++ bdict.contents;
			} else {
				dict[value] = c;
			};
		};

		init(value, weight) => {
			type value == "object" then {
				self.a = value;
				self.b = weight;
				self.weight = a.weight + b.weight;
				self.value = 0;
			} else {
				self.value = value;
				self.weight = weight;
			};
		};

		string() => s from {
			s = "[W=" .. weight;
			a != null && b != null then {
				s = s .. ", V=" .. value .. ", " .. a .. ", " .. b .. "]";
			} else {
				s = s .. ", V=" .. value .. "]";
			};
		};

		print(t) => {
			i in [1:t] do os.print("~\t");
			os.printl(value .. " | " .. weight);
			a != null then a.print(t + 1);
			b != null then b.print(t + 1);
		};
	};

	init(text) => {
		char_table := new Map;
		c in text do {
			!char_table.containsKey(c) then {
				char_table[c] = 0;
			};
			char_table[c] = char_table[c] + 1;
		};
		nodes := [];
		e in char_table do {
			nodes push new Node(e.key, e.value);
		};
		len nodes > 1 do {
			nodes = Arrays.sort(nodes, ((a, b) -> { 
				a.weight == b.weight 
				then a.value < b.value
				else a.weight > b.weight;
			}));
			b := end nodes; pop nodes;
			a := end nodes;	pop nodes;
			nodes push new Node(a,b);
		};

		head = nodes[1];
		dict = head.getDict([]);
		undict = dict.invert();

		encoded = alloc(len text * 127);
		i := 0;
		c in text do {
			val := dict[c];
			c2 in val do {
				i = i + 1;
				encoded[i] = c2;
			};
		};
		encoded = encoded[1:i];
	};

	decode(s) => decoded from {
		s == null then {
			s = encoded;
		};
		decoded := alloc(len s);
		curr := [];
		i := 0;
		c in s do {
			curr push c;
			undict.containsKey(curr) then {
				i = i + 1;
				decoded[i] = undict[curr];
				curr = [];
			};
		};
		decoded = str decoded[1:i];
	};

	toArray() => { encoded };
	iterator() => { encoded };

	binToArr() => a from {
		btod(a) => d from { 
			d = 0; 
			i in [0 :> len a] do { 
				d = d + (2 ** i) * a[i + 1]; 
			}; 
		};
		a = [];
		b in [1 : len encoded : 7] do {
			a push btod(self[b : Math.min(b + 7, len encoded)]);
		};
	};
	
	index(pos) => { num str encoded[pos] };
	string() => { encoded };
	size() => { len encoded };
};