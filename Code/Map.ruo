dynamic Map :: {
	contents := [];

	index(key) => v from {
		i in contents do {
			i.key == key then {
				v ~> i.value;
				return;
			};
		};
		contents push new Link(key);
		v ~> (end contents).value;
	};

	containsKey(key) => b from {
		i in contents do {
			i.key == key then {
				b = true;
				return;
			};
		};
		b = false;
	};

	containsValue(value) => b from {
		i in contents do {
			i.value == value then {
				b = true;
				return;
			};
		};
		b = false;
	};

	iterator() => { contents; };

	size() => { len contents; };

	string() => s from {
		s = "[ ";
		e in contents do {
			s = s .. e .. " ";
		};
		s = s .. "]";
	};

	invert() => nm from {
		nm = new Map;
		e in contents do {
			nm[e.value] = e.key;
		};
	};

	dynamic Link :: {
		key := null;
		value := null;
		init(key, value) => {
			self.key = key;
			self.value = value;
		};
		string() => {
			key .. "=" .. value;
		};
	};
};