# The Greatest Game in the World

snake(size_x, size_y) => {
	# Clear the console and set color
	os.system("cls");
	Color.set(Color.BRIGHT_GREEN);

	# Declare variables
	pos_x := Math.floor(size_x / 4);
	pos_y := Math.floor(size_y / 4);
	dir := 1;
	new_dir := 1;
	score := 0;

	# Set map and buffer to 0
	map := alloc [size_x, size_y] * 0;
	buffer := alloc [size_x, size_y] * 0;

	# Add first fruit
	map[Math.floor(size_x / 4 * 3)][Math.floor(size_y / 4 * 3)] = -1;

	# Declare functions
	drawBlock(x, y, s) => {
		printat(x * 2, y, s);
	};

	drawMap() => {
		i in [0 : len map] do {
			j in [0 : len map[i]] do {
				buffer[i][j] != map[i][j] then {
					map[i][j] == 0 then drawBlock(i + 2, j + 2, "  ");
					map[i][j] == -1 then drawBlock(i + 2, j + 2, "{}");
				}
			};
		};
		buffer = map;

		char := (dir switch {
		0 >> "<_";
		1 >> "\\/";
		2 >> "_>";
		3 >> "/\\";
		});
		drawBlock(pos_x + 2, pos_y + 2, char);
	};

	keypress() => {
		Input.keyDown('A') && dir != 2 then new_dir = 0;
		Input.keyDown('S') && dir != 3 then new_dir = 1;
		Input.keyDown('D') && dir != 0 then new_dir = 2;
		Input.keyDown('W') && dir != 1 then new_dir = 3;
	};

	control() => q from {
		dir = new_dir;
		i in [0 : len map] do {
			j in [0 : len map[i]] do {
				map[i][j] > 0 then {
					map[i][j] -= 1;
				};
			};
		};

		q = false;

		map[pos_x][pos_y] == -1 then {
			score += 1;
			rx := Random.int(size_x - 1);
			ry := Random.int(size_y - 1);
			map[rx][ry] != 0 do {
				rx = Random.int(size_x - 1);
				ry = Random.int(size_y - 1);
			};
			map[rx][ry] = -1;
		} else map[pos_x][pos_y] > 0 then {
			q = true;
			return;
		};

		map[pos_x][pos_y] = score + 1;
		dir switch {
		0 >> pos_x -= 1;
		1 >> pos_y += 1;
		2 >> pos_x += 1;
		3 >> pos_y -= 1;
		};

		pos_x >= len map then q = true;
		pos_x < 0 then q = true;
		pos_y >= len map[0] then q = true;
		pos_y < 0 then q = true;
	};

	# Draw Border
	i in [0 : size_y + 2] do drawBlock(1, i + 1, "[]");
	i in [0 : size_y + 2] do drawBlock(size_x + 2, i + 1, "[]");
	i in [0 : size_x + 2] do drawBlock(i + 1, 1, "[]");
	i in [0 : size_x + 2] do drawBlock(i + 1, size_y + 2, "[]");

	# Game Loop
	timer := 0;
	timer_fps := 0;
	frames := 0;
	!Input.keyDown('Q') do {
		frames += 1;
		time_start := os.milli();
		keypress();
		timer > 100 then {
			control() then break;
			drawMap();
			timer = 0;
		};
		drawBlock(2, size_y + 2, " WASD - Score: " .. score .. " ");

		timer_fps > 1000 then {
			drawBlock(2, 0, " " .. frames .. " FPS ");
			frames = 0;
			timer_fps = 0;
		};
		timer += os.milli() - time_start;
		timer_fps += os.milli() - time_start;
	};
	drawMap();
	drawBlock(pos_x + 2, pos_y + 2, "><");
};

len args switch {
1 >> snake(args[0], args[0]);
2 >> snake(args[0], args[1]);
} >> snake(20, 10);