static Colors :: {
	BLACK := 0;
	BLUE := 1;
	GREEN := 2;
	CYAN := 3;
	RED := 4;
	MAGENTA := 5;
	YELLOW := 6;
	WHITE := 7;
	GREY := 8;
	GRAY := 8;
	BRIGHT_BLUE := 9;
	BRIGHT_GREEN := 10;
	BRIGHT_CYAN := 11;
	BRIGHT_RED := 12;
	BRIGHT_MAGENTA := 13;
	BRIGHT_YELLOW := 14;
	BRIGHT_WHITE := 15;
};

static os :: {
	print(x) => { _OUTER_CALL_(1, x) };
	printat(x, y, s) => { _OUTER_CALL_(9, y, x, s) };
	printl(x) => { print(x .. "\n") };
	newl() => { printl("") };
	system(x) => { _OUTER_CALL_(0, x)[0] };
	exit() => { _OUTER_CALL_(2) };
	rawFile(filename) => { _OUTER_CALL_(8, filename)[0] };
	keyDown(c) => { _OUTER_CALL_(10, c)[0] };
	milli() => { _OUTER_CALL_(11)[0] };
	prompt(q) => v from {
		print(q);
		v = Input.string();
	};
	
	color(k, k2) => { _OUTER_CALL_(7, k + 16 * k2) };

	colorMap() => {
		i in [0 : 16] do {
			j in [0 : 16] do {
				k := i + 16 * j;
				color(k);
				print(" ");
				k < 10 then {
					print("  ");
				} else k < 100 then {
					print(" ");
				};
				print(k);
			};
			newl();
		};
	};

	static Input :: {
		number() => { num string() };
		string() => { _OUTER_CALL_(3)[0] };
		line() => { _OUTER_CALL_(4)[0] };
	};
};

static Random :: {
	double() => { _OUTER_CALL_(5)[0] };
	int(min, max) => i from {
		max == null then {
			max = min;
			min = 0;
		};
		i = Math.floor(double() * (max - min) + min);
	};
};

static Math :: {
	floor(x) => { _OUTER_CALL_(6, x)[0] };
	sqrt(x) => { x ** 0.5 };
	max(a, b) => { a > b then a else b };
	min(a, b) => { a < b then a else b };
	sum(a) => s from {
		s = 0;
		i in a do {
			s = s + i;
		};
	};
	prod(a) => p from {
		p = 1;
		i in a do {
			p = p * i;
		};
	};
	fact(x) => prod([1:>x]);
};

# Converts an array to a string representation
sarr(a) => s from {
	type a == "array" then {
		s = "[ ";
		i in a do {
			s = s .. idem(i) .. " ";
		};
		s = s .. "]";
	} else {
		s = a;
	};
};

# Returns a paired object array built from the contents of two equally sized arrays
pairs(a, b) => p from {
	len a != len b then return;
	p = [];
	i in [0 : len a] do {
		p push struct {
			first := a[i], 
			second := b[i]
		};
	};
};