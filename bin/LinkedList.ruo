# LinkedList Example

struct LinkedList :: {
	local head = null;

	# Adds element to list
	add(e) => v from {
		head == null then {
			head = new Link(e);
		} else {
			local curr = head;
			curr.next != null do { curr = curr.next };
			curr.next = new Link(e);
		};
		v = e;
	};

	iterator() => { toArray() };

	toArray() => a from {
		a = [];
		local curr = head;
		curr != null do {
			a push curr.value;
			curr = curr.next;
		};
	};

	# Retrieves mutable element from list
	index(pos) => e from {
		e = null;
		local curr = head;
		i in [2 : pos] do {curr = curr.next};
		e := curr.value;
	};

	# Removes element from list
	remove(pos) => {
		local curr = head;
		local prev = null;
		i in [2 : pos] do {
			prev = curr;
			curr = curr.next;
		};
		prev == null then head = curr.next;
		prev.next = curr.next;
	};

	# Retrieves length of the list
	size() => s from {
		s = 0;
		local curr = head;
		curr != null do {
			curr = curr.next;
			s = s + 1;
		};
	};

	# Returns string version of the list
	string() => s from {
		s = "[ ";
		curr = head;
		curr != null do {
			s = s .. curr.value .. " ";
			curr = curr.next;
		};
		s = s .. "]";
	};

	struct Link :: {
		local value;
		local next;

		init(v) => {
			value = v;
			next = null;
		};
	};
};