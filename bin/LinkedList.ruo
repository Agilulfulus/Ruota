# LinkedList Example

dynamic LinkedList :: {
	var head;

	# Adds element to list
	add(&e) => v from {
		head == null then {
			head = new Link(e);
		} else {
			curr := head;
			curr.next != null do { curr = curr.next };
			curr.next = new Link(e);
		};
		v &= e;
	};

	iterator() => { toArray() };

	toArray() => a from {
		a = [];
		curr := head;
		curr != null do {
			a push curr.value;
			curr = curr.next;
		};
	};

	equals(l) => b from {
		b = true;
		len l != size() then {
			b = false;
			return;
		};
		i in [0 : size()] ->> {
			l[i] != index(i) then {
				b = false;
				break;
			};
		};
	};

	# Retrieves mutable element from list
	index(pos) => e from {
		e = null;
		curr := head;
		[1 :> pos] ->> {curr = curr.next};
		e &= curr.value;
	};

	# Removes element from list
	remove(pos) => {
		curr := head;
		prev := null;
		[0 : pos] ->> {
			prev = curr;
			curr = curr.next;
		};
		prev == null then head = curr.next;
		prev.next = curr.next;
	};

	# Retrieves length of the list
	size() => s from {
		s = 0;
		curr := head;
		curr != null do {
			curr = curr.next;
			s += 1;
		};
	};

	# Returns string version of the list
	string() => s from {
		s = "[ ";
		curr := head;
		curr != null do {
			s ..= curr.value .. " ";
			curr = curr.next;
		};
		s ..= "]";
	};

	dynamic Link :: {
		value := null;
		next := null;

		init(&value) => {
			self.value &= value;
			next = null;
		};
	};
};