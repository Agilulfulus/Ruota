load "System.ruo";

static Arrays :: {
	@ Sorts an array using quicksort algorithm
	@ A comparator lambda may be specified as the second argument
	sort(a, comp) => n_a from {
		n_a = a;
		#a < 2 then return;
		comp == null then comp = (x, y) -> { x < y };
		local lower = [];
		local upper = [];
		local pivot = System.Random.int(#a);
		i in [1 : #a] do {
			i != pivot then {
				local e = a[i];
				comp(e, a[pivot]) 
				then lower = lower ++ [ e ];
				else upper = upper ++ [ e ];
			};
		};
		n_a = idem(lower, comp) ++ [ a[pivot] ] ++ idem(upper, comp);
	};

	@ Removes element from array 'a' at position 'pos'
	remove(a, pos) => n_a from {
		pos == 1 then {
			n_a = a[2 : #a];
		} else pos == #a then {
			n_a = a[1 :> #a];
		} else {
			n_a = a[1 :> pos, (pos + 1) : #a];
		};
	};

	@ Removes elements of equivalent value to 'value'
	removeValue(a, value) => n_a from {
		n_a = [];
		e in a do {
			e != value then {
				n_a = n_a ++ [e];
			};
		};
	};

	@ Pushes an element 'e' to the back of array 'a'
	push(a, e) => { a ++ [e] };

	@ Pushes an element 'e' to the front of array 'a'
	unshift(a, e) => { [e] ++ a };

	@ Pop the last element of array 'a'
	pop(a) => { a[1 :> #a] };

	@ Pop the first element of array 'a'
	shift(a) => { a[2 : #a] };
}