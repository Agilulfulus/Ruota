static Colors :: {
	local BLACK = 0;
	local BLUE = 1;
	local GREEN = 2;
	local CYAN = 3;
	local RED = 4;
	local MAGENTA = 5;
	local YELLOW = 6;
	local WHITE = 7;
	local GREY = 8;
	local GRAY = 8;
	local BRIGHT_BLUE = 9;
	local BRIGHT_GREEN = 10;
	local BRIGHT_CYAN = 11;
	local BRIGHT_RED = 12;
	local BRIGHT_MAGENTA = 13;
	local BRIGHT_YELLOW = 14;
	local BRIGHT_WHITE = 15;
};

static Console :: {
	print(x) => { _OUTER_CALL_(1, x) };
	printLine(x) => { print(x .. "\n") };
	newLine() => { printLine("") };
	os(x) => { _OUTER_CALL_(0, x)[1] };
	exit() => { _OUTER_CALL_(2) };
	
	color(k, k2) => { _OUTER_CALL_(7, k + 16 * k2) };

	colorMap() => {
		i in [0 : 15] do {
			j in [0 : 15] do {
				local k = i + 16 * j;
				color(k);
				print(" ");
				k < 10 then {
					print("  ");
				} else k < 100 then {
					print(" ");
				};
				print(k);
			};
			newLine();
		};
	};

	static Input :: {
		number() => { val string() };
		string() => { _OUTER_CALL_(3)[1] };
		line() => { _OUTER_CALL_(4)[1] };
	};
};

static Random :: {
	double() => { _OUTER_CALL_(5)[1] };
	int(min, max) => {
		max == null then 
			Math.floor(double() * (min - 1) + 1)
		else
			Math.floor(double() * (max - min) + min);
	};
};

static Math :: {
	floor(x) => { _OUTER_CALL_(6, x)[1] };
	sqrt(x) => { x ** 0.5 };
	max(a, b) => { a > b then a else b };
	min(a, b) => { a < b then a else b };
};

@ Converts an array to a string representation
sarr(a) => s from {
	type a == "array" then {
		s = "[ ";
		i in a do {
			s = s .. idem(i) .. " ";
		};
		s = s .. "]";
	} else {
		s = a;
	};
};

@ Returns a paired object array built from the contents of two equally sized arrays
pairs(a, b) => p from {
	p = null;
	len a != len b then return;
	p = [];
	i in [1 : len a] do {
		local temp;
		temp.first = a[i];
		temp.second = b[i];
		p = p ++ [ temp ];
	};
};