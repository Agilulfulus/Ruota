R"RU0(

# Throws an error caught by a try-catch loop
throw(e) => {
	_OUTER_CALL_("error", e);
};

# Returns every combination of arrays a and b
lace(&a, &b) => t from {
	t = [];
	i in a ->> j in b ->> {
		t push struct {
			first :&= i;
			second :&= j;
			string() => { "(" .. first .. ", " .. second .. ")" };
		};
	};
};

static os :: {
	system(x) => { _OUTER_CALL_("console.system", x)[0] };
	getenv(v) => { _OUTER_CALL_("console.getenv", v)[0] };
	exit() => { _OUTER_CALL_("console.exit") };
	milli() => { _OUTER_CALL_("console.milli")[0] };
};

static System :: {
	path() => { _OUTER_CALL_("filesystem.path")[0] };
	dir(path = "") => { _OUTER_CALL_("filesystem.listdir", path) };
	exists(path) => { _OUTER_CALL_("filesystem.exists", path)[0] };
	mkdir(path) => { _OUTER_CALL_("filesystem.mkdir", path) };
	remove(path) => { _OUTER_CALL_("filesystem.remove", path) };
	size(path) => { _OUTER_CALL_("filesystem.size", path)[0] };
	copy(origin, path) => { _OUTER_CALL_("filesystem.copy", origin, path) };
	rename(origin, path) => { _OUTER_CALL_("filesystem.rename", origin, path) };
};

static Math :: {
	PI := 3.141593;
	floor(x) => { _OUTER_CALL_("console.floor", num x)[0] };
	sqrt(x) => { x ** 0.5 };
	max(&a, &b) => { a > b then a else b };
	min(&a, &b) => { a < b then a else b };
	abs(a) => { a < 0 then -a else a };
	round(a, d) => r from {
  		m := 10 ** (d != null then d else 0);
  		r = floor(num a * m + 0.5) / m;
	};
	ceil(a) => { floor(a) == a then a else floor(a) + 1 };

	sum(a) => s from {
		s = 0;
		i in a ->> {
			s = s + i;
		};
	};
	prod(a) => p from {
		p = 1;
		i in a ->> {
			p = p * i;
		};
	};
	fact(x) => { x >= 2 then x * idem(x - 1) else x };

	# TRIG
	cos(x, t = 10) => s from {
		x >= 2 * PI do x -= 2 * PI;
		x <= -2 * PI do x += 2 * PI;
		s = 0;
		i in [0 : t] ->> {
			s += (-1 ** i) * (x ** (2 * i)) / fact(2 * i);
		};
	};

	sin(x, t = 10) => s from {
		x >= 2 * PI do x -= 2 * PI;
		x <= -2 * PI do x += 2 * PI;
		s = 0;
		i in [0 : t] ->> {
			s += (-1 ** i) * (x ** (2 * i + 1)) / fact(2 * i + 1);
		};
	};

	tan(x, t) => { sin(x, t) / cos(x, t) };

	exp(x, t = 10) => s from {
		s = 0;
		i in [0 : t] ->> {
			s += (x ** i) / fact(i);
		};
	};
};

static Random :: {
	double() => { _OUTER_CALL_("console.random")[0] };
	int(min, max) => i from {
		max == null then {
			max = min;
			min = 0;
		};
		i = Math.floor(double() * (max - min) + min);
	};
	list(&a) => { a[int(0, len a)] };
};

static Regex :: {
	search(s, e) => { _OUTER_CALL_("regex.search", s, e) };
	replace(s, r, e) => { _OUTER_CALL_("regex.replace", s, r, e)[0] };
};

dynamic File :: {
	var ptr;
	var mode;
	
	init(filename, mode='r') => {
		self.mode = mode;
		mode switch {
		'r' >> { ptr = _OUTER_CALL_("file.open", filename)[0] };
		'w' >> { ptr = _OUTER_CALL_("filew.open", filename, mode)[0] };
		'a' >> { ptr = _OUTER_CALL_("filew.open", filename, mode)[0]; self.mode = 'w' };
		};
	};

	write(s) => {
		ptr == null then throw("Error: file closed!");
		mode == 'r' then throw("Error: file openned in read mode!");
		_OUTER_CALL_("filew.write", ptr, s);
	};

	readLine() => t from {
		ptr == null then throw("Error: file closed!");
		mode == 'w' then throw("Error: file openned in write mode!");
		t = _OUTER_CALL_("file.read_line", ptr)[0];
	};

	readAll() => t from {
		ptr == null then throw("Error: file closed!");
		mode == 'w' then throw("Error: file openned in write mode!");
		line := "";
		t = "";
		(line = readLine()) != null do {
			t ..= line .. "\n";
		};
	};

	read(length = 1) => t from {
		ptr == null then throw("Error: file closed!");
		mode == 'w' then throw("Error: file openned in write mode!");
		t = _OUTER_CALL_("file.read", ptr, length)[0];
	};

	close() => {
		ptr == null then throw("Error: file closed!");
		mode switch {
		'r' >> _OUTER_CALL_("file.close", ptr);
		'w' >> _OUTER_CALL_("filew.close", ptr);
		};
		ptr = null;
	};

	dynamic Iterator :: {
		file_o := null;
		current_line := null;
		init(&file_o) => {
			self.file_o = file_o;
			next();
		};
		next() => {
			current_line = file_o.readLine();			
		};
		hasi() => {
			current_line != null;
		};
		geti() => {
			current_line;
		};
	};
};

static Network :: {
	# Returns a list of addresses from a given url
	getAddresses(url) => { _OUTER_CALL_("network.get_addresses", url) };
};

dynamic IOService :: {
	ptr := null;
	init() => {
		ptr = _OUTER_CALL_("network.start")[0];
	};
	shutdown() => {
		_OUTER_CALL_("network.io_shutdown", ptr);
	};
};

dynamic Socket :: {
	ptr := null;
	init(ios) => {
		type ios == "IOService" then throw("No IOService given.");
		r := _OUTER_CALL_("network.create_socket", ios.ptr);
		r[0] != null then throw(r[0]);
		ptr = r[1];
	};
	# Connects to an address (url or IP) on a given port
	connect(addr, port) => {
		c in addr ->> { 
			!(c == '.' && c > '0' && c < '9') then {
				addr = Network.getAddresses(addr)[0]; 
				break; 
			};
		};
		r := _OUTER_CALL_("network.connect", ptr, str addr, num port)[0];
		r != null then throw(r);
	};
	# Sends data to the connected server
	send(value) => {
		r := _OUTER_CALL_("network.send", ptr, value)[0];
		r != null then throw(r);
	};
	# Receives data up to a given amount of bytes from server
	# If no callback is given, the function waits until it recieves
	# a response and then returns the function. If a callback is given,
	# it detaches the receiving function from the main thread and calls
	# the callback when it receives the answer, passing the value to
	# the callback.
	receive(bytes = 512, callback = null) => r from {
		callback != null then {
			detach callback(_OUTER_CALL_("network.receive", ptr, bytes)[0]);
		} else {
			r = _OUTER_CALL_("network.receive", ptr, bytes)[0];
		};
	};
	# Listens continuously, requires a callback
	# Blocking can be specified
	listen(callback, bytes = 512, block = false) => {
		block then {
			_OUTER_CALL_("network.listen", ptr, bytes, callback);
		} else {
			detach _OUTER_CALL_("network.listen", ptr, bytes, callback);
		};
	};
	shutdown() => {
		r := _OUTER_CALL_("network.shutdown", ptr)[0];
		r != null then throw(r);
	};
};

dynamic JSONTree :: {
	data := [];
	init(data = null) => {
		type data == "array" then {
			generate(data);
		} else {
			generate(_OUTER_CALL_("json.parse", data)[0]);
		};
	};
	generate(a) => {
		x in a ->> {
			data push new TreeNode(x[0], x[1]);
			x[0] == "" then { data[end].key = len data - 1; };
			type x[1] == "array" then { data[end].value = new JSONTree(x[1]); };
		};
	};
	index(key) => i from {
		key = str key;
		x in data ->> {
			x.key == key then {
				i &= x.value;
				return;
			};
		};
		data push new TreeNode(key, new JSONTree());
		i &= data[end].value;
	};
	containsKey(key) => b from {
		b = false;
		x in data ->> {
			x.key == key then {
				b = true;
				return;
			};
		};
	};
	containsValue(value) => b from {
		b = false;
		x in data ->> {
			x.value == value then {
				b = true;
				return;
			};
		};
	};
	getKeys() => keys_m from {
		keys_m = [];
		i in data ->> { keys_m push i.key };
	};
	getValues() => values from {
		values = [];
		i in data ->> { values push i.value };
	};
	string() => s from {
		s = "{";
		x in data ->> {
			s ..= "\"" .. Strings.literal(x.key) .. "\":";
			type x.value == "JSONTree" then {
				s ..= x.value .. ",";
			} else {
				s ..= "\"" .. Strings.literal(x.value) .. "\",";
			};
		};
		s = str s[0:end] .. "}";
	};
	size() => { len data };
	equals(tree) => b from {
		b = false;
		type tree != type self then return;
		len tree.data != len data then return;
		x in tree ->> {
			!containsKey(x.key) then return;
			index(x.key) != x.value then return;
		};
		b = true;
	};

	dynamic TreeNode :: {
		key := null;
		value := null;
		init(key, value) => {
			self.key = key;
			self.value = value;
		};
	};

	dynamic Iterator :: {
		tree_o := null;
		current_index := 0;
		init(&tree_o) => {
			self.tree_o = tree_o;
		};
		next() => {
			current_index += 1;	
		};
		hasi() => {
			current_index < len tree_o.data;
		};
		geti() => {
			tree_o.data[current_index];
		};
	};
};

static Strings :: {
	replace(s, a, b) => n_s from {
		i in s ->> {
			i == a then {
				i = b;
			};
		};
		n_s = s;
	};

	split(s, a = ' ', max = -1) => array from {
		array = [""];
		max == 0 then { array = [s]; return};
		i in [0 : len s] ->> {
			s[i] == a then {
				len array >= max && max != -1 then {
					array push str s[i + 1 : len s];
					return;
				};
				array push "";
			} else {
				array[end] ..= s[i];
			};
		};
	};

	remove(s, a) => n_s from {
		n_s = "";
		c in s ->> {
			c != a then n_s ..= c;
		};
	};

	join(array, a = "") => s from {
		s = array[0];
		i in [1 : len array] ->> {
			s ..= a .. array[i];
		};
	};

	find(s, pat) => index from {
		index = -1;
		i in [0 :> len s - len pat] ->> {
			str s[i : i + len pat] == pat then {
				index = i;
				return;
			};
		};
	};

	findAll(s, pat) => indices from {
		indices = [];
		i in [0 :> len s - len pat] ->> {
			str s[i : i + len pat] == pat then indices push i;
		};
	};

	toUpper(s) => {str (c in s ->> { c >= 'a' && c <= 'z' then c = (c - 'a') + 'A'  else c })};
	toLower(s) => {str (c in s ->> { c >= 'A' && c <= 'Z' then c = (c - 'A') + 'a'  else c })};

	literal(s) => n_s from {
		n_s = "";
		c in str s ->> {
			c switch {
				'\t' >> {n_s ..= "\\t"};
				'\n' >> {n_s ..= "\\n"};
				'\"' >> {n_s ..= "\\\""};
				'\a' >> {n_s ..= "\\a"};
				'\b' >> {n_s ..= "\\b"};
				'\r' >> {n_s ..= "\\r"};
			} >> { n_s ..= c };
		};
	};
};

)RU0"